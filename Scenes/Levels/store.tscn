[gd_scene load_steps=10 format=3 uid="uid://c1aaqf7xcl2yl"]

[ext_resource type="Script" uid="uid://bqfkmtiug8br3" path="res://Scripts/World/Store/store.gd" id="1_wvc5b"]
[ext_resource type="PackedScene" uid="uid://b8hv88k5gv4k0" path="res://Scenes/Levels/shop.tscn" id="2_lkm64"]
[ext_resource type="PackedScene" uid="uid://bw457hihc7a4e" path="res://Scenes/Levels/workshop.tscn" id="4_bl56s"]
[ext_resource type="AudioStream" uid="uid://bwjhrtytvinmd" path="res://Assets/Audio/Music/Shop.wav" id="10_prq2a"]
[ext_resource type="Theme" uid="uid://difjd64jhu5hr" path="res://Assets/Themes/Main.tres" id="11_fs4vs"]

[sub_resource type="Gradient" id="Gradient_i3rh0"]
colors = PackedColorArray(0, 0, 0, 1, 0.548963, 0.548963, 0.548963, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_voxcw"]
gradient = SubResource("Gradient_i3rh0")
fill_from = Vector2(0.0331492, 1)
fill_to = Vector2(0, 0)

[sub_resource type="GDScript" id="GDScript_xt6rj"]
resource_local_to_scene = true
script/source = "extends Sprite2D

@export var bounds_cshape: CollisionShape2D
@export var customer_drop_shape: CollisionShape2D
@export var customer: Node
@export var target_position: Vector2

@onready var customer_requested_tags: Array[String]
@onready var remove_effect = $SparkleExplosion

const PURCHASE_SOUND = preload(\"res://Assets/Audio/SFX/purchase.mp3\")

signal item_sold(item: Sprite2D)

const SPEED := 20
const STIFFNESS := 0.06
var dampning := 0.9

var holding_mouse0 = false
var acceleration = Vector2.ZERO
var velocity = Vector2.ZERO
var delta_position = Vector2.ZERO
var grab_position: Vector2

var isOutOfBounds = false
var released_out_of_bounds = false

func _ready() -> void:
	if customer: customer_requested_tags = customer.requested_item_tags

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	
	delta_position = Vector2.ZERO
	
	if holding_mouse0:
		dampning = 0.9
		delta_position = (get_global_mouse_position() - global_position)
	else:
		dampning = 0.99
	
	# If out of bounds happened on this frame, bounce back
	_keep_within_bounds()
	
	if holding_mouse0:
		released_out_of_bounds = false
	if released_out_of_bounds:
		#print(\"Grab position out of bounds\")
		var shape_global_transform = bounds_cshape.global_transform
		var local_rect = bounds_cshape.shape.get_rect()
		var rect = Rect2(
		shape_global_transform * local_rect.position,
			shape_global_transform.basis_xform(local_rect.size))
		
		if not rect.has_point(grab_position):
			grab_position = Vector2(
				0.3 * randi_range(-rect.size.x, rect.size.x),
				0.3 * randi_range(-rect.size.y, rect.size.y)
				)
		
		#print(\"Going to: \", grab_position)
		global_position = global_position.lerp(grab_position, 0.1)
		if global_position.distance_to(grab_position) < 1.0: released_out_of_bounds = false
	# Move item towards mouse
	acceleration = delta_position * STIFFNESS
	velocity += acceleration
	velocity *= dampning
	rotate(2 * delta * (velocity.x))
	global_position += velocity * SPEED * delta

# Keep within bounds and move back to grabbed spot if released in air
func _keep_within_bounds():
	if holding_mouse0: return
	if not bounds_cshape: return
	
	var bounds = bounds_cshape.shape.get_rect()
	# Check if out of bounds
	
	var outX = position.x < bounds.position.x or position.x > bounds.end.x
	var outY = position.y < bounds.position.y or position.y > bounds.end.y
	
	# If released out of bounds
	if Input.is_action_just_released(\"left_click\") and (outX or outY):
		released_out_of_bounds = true
		velocity = Vector2.ZERO
		if not customer_drop_shape:	return
		var local_mouse_pos = customer_drop_shape.to_local(get_global_mouse_position())
		
		# If dropped on customer
		if customer_drop_shape.shape.get_rect().has_point(local_mouse_pos):
			_sell_item()
			
	# If not yet out of bounds then reverse velocity (avoids getting stuck on edge)
	if outX and not isOutOfBounds:
		velocity.x *= -0.8
	if outY and not isOutOfBounds:
		velocity.y *= -0.8

	if (outX or outY): # If out of bounds
		isOutOfBounds = true
	else: # We are not out of bounds
		isOutOfBounds = false

func _sell_item():
	if customer.recieved_item:
		print(\"Customer already recieved item!\")
		return
	if customer_requested_tags.size() == 0:
		print(\"No requested items\")
		return
	# If requested tags not in item tags, skip
	for tag in customer_requested_tags:
		if not tag in get_meta(\"item_properties\").tags:
			print(tag, \" not in \", get_meta(\"item_properties\").tags)
			customer.state = customer.States.ITEM_GIVEN_INCORRECT
			return
	GameState.money += get_meta(\"item_properties\").value
	GameState.remove_item_from_inventory(self)
	var sound_effect = AudioStreamPlayer.new()
	sound_effect.volume_db = -8.0
	sound_effect.stream = PURCHASE_SOUND
	get_parent().add_child(sound_effect)
	sound_effect.play()
	item_sold.emit()
	customer.state = customer.States.ITEM_GIVEN_CORRECT
	queue_free()

# Set holding_mouse0 to true if clicked on item
func _unhandled_input(event: InputEvent) -> void:
	if not event is InputEventMouseButton: return
	if event.button_index != MOUSE_BUTTON_LEFT: return
	if not event.is_pressed():
		holding_mouse0 = false
		return

	if Utilities.get_sprite_rect(get_node(\".\")).has_point(get_global_mouse_position()):
		holding_mouse0 = true
		grab_position = get_local_mouse_position()
		get_viewport().set_input_as_handled()

func _on_texture_changed() -> void:
	var shape: RectangleShape2D = $%CollisionShape2D.shape
	shape.size = get_rect().size

func _notification(what: int) -> void:
	if what == NOTIFICATION_PREDELETE:
		remove_effect.emitting = true
		remove_effect.reparent(get_parent())
		remove_effect.global_position = global_position
"

[sub_resource type="GDScript" id="GDScript_pbwfr"]
resource_local_to_scene = true
script/source = "extends Sprite2D

@export var bounds_cshape: CollisionShape2D
@export var customer_drop_shape: CollisionShape2D
@export var customer: Node
@export var target_position: Vector2

@onready var customer_requested_tags: Array[String]
@onready var remove_effect = $SparkleExplosion

const PURCHASE_SOUND = preload(\"res://Assets/Audio/SFX/purchase.mp3\")

signal item_sold(item: Sprite2D)

const SPEED := 20
const STIFFNESS := 0.06
var dampning := 0.9

var holding_mouse0 = false
var acceleration = Vector2.ZERO
var velocity = Vector2.ZERO
var delta_position = Vector2.ZERO
var grab_position: Vector2

var isOutOfBounds = false
var released_out_of_bounds = false

func _ready() -> void:
	if customer: customer_requested_tags = customer.requested_item_tags

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	
	delta_position = Vector2.ZERO
	
	if holding_mouse0:
		dampning = 0.9
		delta_position = (get_global_mouse_position() - global_position)
	else:
		dampning = 0.99
	
	# If out of bounds happened on this frame, bounce back
	_keep_within_bounds()
	
	if holding_mouse0:
		released_out_of_bounds = false
	if released_out_of_bounds:
		#print(\"Grab position out of bounds\")
		var shape_global_transform = bounds_cshape.global_transform
		var local_rect = bounds_cshape.shape.get_rect()
		var rect = Rect2(
		shape_global_transform * local_rect.position,
			shape_global_transform.basis_xform(local_rect.size))
		
		if not rect.has_point(grab_position):
			grab_position = Vector2(
				0.3 * randi_range(-rect.size.x, rect.size.x),
				0.3 * randi_range(-rect.size.y, rect.size.y)
				)
		
		#print(\"Going to: \", grab_position)
		global_position = global_position.lerp(grab_position, 0.1)
		if global_position.distance_to(grab_position) < 1.0: released_out_of_bounds = false
	# Move item towards mouse
	acceleration = delta_position * STIFFNESS
	velocity += acceleration
	velocity *= dampning
	rotate(2 * delta * (velocity.x))
	global_position += velocity * SPEED * delta

# Keep within bounds and move back to grabbed spot if released in air
func _keep_within_bounds():
	if holding_mouse0: return
	if not bounds_cshape: return
	
	var bounds = bounds_cshape.shape.get_rect()
	# Check if out of bounds
	
	var outX = position.x < bounds.position.x or position.x > bounds.end.x
	var outY = position.y < bounds.position.y or position.y > bounds.end.y
	
	# If released out of bounds
	if Input.is_action_just_released(\"left_click\") and (outX or outY):
		released_out_of_bounds = true
		velocity = Vector2.ZERO
		if not customer_drop_shape:	return
		var local_mouse_pos = customer_drop_shape.to_local(get_global_mouse_position())
		
		# If dropped on customer
		if customer_drop_shape.shape.get_rect().has_point(local_mouse_pos):
			_sell_item()
			
	# If not yet out of bounds then reverse velocity (avoids getting stuck on edge)
	if outX and not isOutOfBounds:
		velocity.x *= -0.8
	if outY and not isOutOfBounds:
		velocity.y *= -0.8

	if (outX or outY): # If out of bounds
		isOutOfBounds = true
	else: # We are not out of bounds
		isOutOfBounds = false

func _sell_item():
	if customer.recieved_item:
		print(\"Customer already recieved item!\")
		return
	if customer_requested_tags.size() == 0:
		print(\"No requested items\")
		return
	# If requested tags not in item tags, skip
	for tag in customer_requested_tags:
		if not tag in get_meta(\"item_properties\").tags:
			print(tag, \" not in \", get_meta(\"item_properties\").tags)
			customer.state = customer.States.ITEM_GIVEN_INCORRECT
			return
	GameState.money += get_meta(\"item_properties\").value
	GameState.remove_item_from_inventory(self)
	var sound_effect = AudioStreamPlayer.new()
	sound_effect.volume_db = -8.0
	sound_effect.stream = PURCHASE_SOUND
	get_parent().add_child(sound_effect)
	sound_effect.play()
	item_sold.emit()
	customer.state = customer.States.ITEM_GIVEN_CORRECT
	queue_free()

# Set holding_mouse0 to true if clicked on item
func _unhandled_input(event: InputEvent) -> void:
	if not event is InputEventMouseButton: return
	if event.button_index != MOUSE_BUTTON_LEFT: return
	if not event.is_pressed():
		holding_mouse0 = false
		return

	if Utilities.get_sprite_rect(get_node(\".\")).has_point(get_global_mouse_position()):
		holding_mouse0 = true
		grab_position = get_local_mouse_position()
		get_viewport().set_input_as_handled()

func _on_texture_changed() -> void:
	var shape: RectangleShape2D = $%CollisionShape2D.shape
	shape.size = get_rect().size

func _notification(what: int) -> void:
	if what == NOTIFICATION_PREDELETE:
		remove_effect.emitting = true
		remove_effect.reparent(get_parent())
		remove_effect.global_position = global_position
"

[node name="Store" type="Node2D"]
script = ExtResource("1_wvc5b")

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(4, 4)

[node name="Background" type="Sprite2D" parent="."]
z_index = -1
scale = Vector2(4.5, 2.53125)
texture = SubResource("GradientTexture2D_voxcw")

[node name="Shop" parent="." instance=ExtResource("2_lkm64")]
item_move_script = SubResource("GDScript_xt6rj")

[node name="Workshop" parent="." instance=ExtResource("4_bl56s")]
position = Vector2(300, 0)
item_move_script = SubResource("GDScript_pbwfr")

[node name="ButtonToShop" type="Button" parent="."]
offset_left = 126.0
offset_top = 22.0
offset_right = 141.0
offset_bottom = 37.0
theme = ExtResource("11_fs4vs")
text = ">"

[node name="ButtonToWorkshop" type="Button" parent="."]
offset_left = -141.0
offset_top = 22.0
offset_right = -126.0
offset_bottom = 37.0
theme = ExtResource("11_fs4vs")
text = "<"

[node name="ShopTheme" type="AudioStreamPlayer" parent="." groups=["music"]]
unique_name_in_owner = true
process_mode = 3
stream = ExtResource("10_prq2a")
volume_db = -8.0
autoplay = true

[connection signal="day_finished" from="Shop" to="." method="_on_day_finished"]
[connection signal="pressed" from="ButtonToShop" to="." method="_on_button_to_shop_pressed"]
[connection signal="pressed" from="ButtonToWorkshop" to="." method="_on_button_to_workshop_pressed"]
